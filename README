This package contains the OSSS 2.2.1 simulation library:
=========================================================

This is the release of the OSSS (Oldenburg System Synthesis Subset)
library version 2.2 for modelling synthesisable, adaptive
Hardware/Software systems.

It is the first joint release of the results of the ICODES project
(http://icodes.offis.de) and OSSS+R, the extension for modelling and
synthesis of dynamically reconfigurable systems, based on OSSS.

0. Requirements
---------------

  + SystemC library version 2.2.0
  + GNU GCC/G++ at least version 3.4.4
  + GNU Make (at least version 3.79)

1. Installation:
----------------

You obviously already managed the first two steps:

  + Download OSSS from either the ANDRES (http://andres.offis.de)
    or the FOSSY (http://fossy.offis.de) website.
  + Untar it to a directory of your choice:
      gunzip -c osss-2.2.1.tar.gz | tar xvf -

Prepare your environment:

  + set environment variable SYSTEMC_HOME to your SystemC
    installation path (at least version 2.2.0)
    - bash:
      export SYSTEMC_HOME=<path_to_systemc>
    - csh (tcsh,...)
      setenv SYSTEMC_HOME <path_to_systemc>
  + you might need to set the environment variable
    SYSTEMC_LIB as well, if your SystemC installation
    differs from a standard SystemC installation.

Compile the library:

  + Enter to OSSS directory
  + Invoke GNU Make (usually by typing 'make' or 'gmake')
    in the extracted directory.
  + This should
    - configure the source tree
    - compile the library
  + More information and possible build and configuration
    options can be obtained by running
      'make help'
    in the OSSS directory.

Compile the examples (optional):

  + either run 'make examples' from the top-level of the
    OSSS directory or enter the 'examples' diretory
    (or any further sub-directory) and run 'make' there.

2. Usage:
---------

To use the OSSS library in your SystemC projects, the following
steps are necessary:

  + add OSSS directory to your include paths, i.e. add
      '-I<osss/directory>/include
    to the compiler call(s)
  + include OSSS library during linking, i.e. link options include
      '-L<osss/directory>/lib -losss'

You might want to have a look at examples/Makefile.osss and
examples/Makefile.examples as a starting point for your own
applications. These Makefiles are not specifically tuned
for the OSSS library itself, therefore the specific
Makefiles in the examples directories might be helpful, too.

A more detailed introduction to OSSS can be obtained from the
OSSS Tutorial in the doc directory of this distribution.

Oldenburg, June 2008


################################################################################

--------------------------------------------------
 OSSS version 2.2.1 - build system help
--------------------------------------------------

Source tree configuration:
  (g)make config [option=value]...
  Configuration options:
    cxx             : C++ compiler (>= GNU C/C++ compiler 3.4.4)
    systemc         : Path to SystemC installation
    systemc-lib     : Path to SystemC library
    systemc-pthreads: Link against SystemC library built with pthreads (yes|no)
    verbose         : Verbose compilation output (yes|no)
    debug           : Include debugging information in library (yes|no)
    profile         : Include profiling information in library (yes|no)
Library targets:
  all       : build library and headers (default target)
  lib       : build static library (in ./lib)
  header    : install public headers (in ./include)
  doc       : build Doxygen documentation (in ./doc)
  dist      : build a .tar.gz archive of source tree
  installer : create a self-contained installer script
Helper targets:
  examples  : build examples
  depend    : build dependency information (usually handled automatically)
  files     : rebuild list of source files (usually not necessary)
  help      : this help text
Cleaning targets:
  clean     : clean object files, header files and library
  distclean : remove autogenerated files (except file lists)
  ultraclean: remove all autogenerated files
  cfgclean  : remove configuration
  objclean  : clean object files
  hdrclean  : clean header files
  libclean  : clean library
  depclean  : clean dependency files
  expclean  : clean built examples
  lstclean  : clean file lists
