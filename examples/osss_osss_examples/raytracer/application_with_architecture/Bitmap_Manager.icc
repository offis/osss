/*------------------------------------------------------------------------------
 Copyright (c) 2005 Kuratorium OFFIS e.V., Oldenburg, Germany
  
 Name of the Library: OSSS (A library for synthesisable system level models 
                            in SystemC) 

 Created for Project: ICODES (http://icodes.offis.de)

 Created by: See AUTHORS (file)

 
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

Contact:
 Kuratorium OFFIS e.V. (http://offis.de)
 Escherweg 2
 D-26121 Oldenburg
 PHONE: *49 (441) 9722-0
 FAX: *49 (441) 9722-102
 -----------------------------------------------------------------------------*/

template<unsigned int NUM_TRACER>
Bitmap_Manager<NUM_TRACER>::Bitmap_Manager()
{
  m_bitmap = Bitmap();
  m_printing_finished = true;
  m_tracing_finished = 0;
}

template<unsigned int NUM_TRACER>
void
Bitmap_Manager<NUM_TRACER>::OSSS_EXPORTED( setPixel(Bitmap_coord_t x, 
						    Bitmap_coord_t y, 
						    Color c) )
{
#ifdef BITMAP_MANAGER_VERBOSE
  cout << "@ " << sc_time_stamp() << ": "
       << __FUNCTION__ << " x: " << x << " y: " << y << endl;
#endif

  m_bitmap.setPixel(x, y, c);
}

template<unsigned int NUM_TRACER>
Color
Bitmap_Manager<NUM_TRACER>::OSSS_EXPORTED( getPixel(Bitmap_coord_t x, 
						    Bitmap_coord_t y) )
{
#ifdef BITMAP_MANAGER_VERBOSE
  cout << "@ " << sc_time_stamp() << ": "
       << __FUNCTION__ << " x: " << x << " y: " << y << endl;
#endif

  m_printing_finished = false; 
  return m_bitmap.getPixel(x, y);
}

template<unsigned int NUM_TRACER>
void
Bitmap_Manager<NUM_TRACER>::OSSS_EXPORTED( tracing_finished() )
{
#ifdef BITMAP_MANAGER_VERBOSE
  cout << "@ " << sc_time_stamp() << ": "
       << __FUNCTION__ << endl;
#endif

  m_tracing_finished++;
}

template<unsigned int NUM_TRACER>
void
Bitmap_Manager<NUM_TRACER>::OSSS_EXPORTED( printing_finished() )
{
#ifdef BITMAP_MANAGER_VERBOSE
  cout << "@ " << sc_time_stamp() << ": "
       << __FUNCTION__ << endl;
#endif

  m_tracing_finished = 0;
  m_printing_finished = true;
}
