/*------------------------------------------------------------------------------
 Copyright (c) 2005 Kuratorium OFFIS e.V., Oldenburg, Germany
  
 Name of the Library: OSSS (A library for synthesisable system level models 
                            in SystemC) 

 Created for Project: ICODES (http://icodes.offis.de)

 Created by: See AUTHORS (file)

 
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

Contact:
 Kuratorium OFFIS e.V. (http://offis.de)
 Escherweg 2
 D-26121 Oldenburg
 PHONE: *49 (441) 9722-0
 FAX: *49 (441) 9722-102
 -----------------------------------------------------------------------------*/

Packet::Packet() 
  : m_SourceAddr(0),
    m_TargetAddr(0),
    m_Payload(0)
{ }

Packet::Packet(sc_uint<8> sourceAddr,  sc_uint<8> targetAddr, sc_uint<8> payload)
  : m_SourceAddr(sourceAddr),
    m_TargetAddr(targetAddr),
    m_Payload(payload)
{ }

Packet::Packet(const Packet &pkt)
{
  m_SourceAddr = pkt.m_SourceAddr;
  m_TargetAddr = pkt.m_TargetAddr;
  m_Payload = pkt.m_Payload;
}

/*
 * the serialise method declares all member variables of this class which
 * have to be serialised
 */
void Packet::serialise()
{
  store_element(m_SourceAddr);
  store_element(m_TargetAddr);
  store_element(m_Payload);
}

/*
 * the deserialise method declares all member variables of this class which
 * have to be deserialised (this are typically the same members which are
 * declared in the serialise method) if multiple member variables are 
 * serialised, the sequence of the declarations in the serialise and in the
 * deserialise method need to match
 */
void Packet::deserialise()
{
  restore_element(m_SourceAddr);
  restore_element(m_TargetAddr);
  restore_element(m_Payload);
}

//------------------------------------------------------------------------------

sc_uint<8>  
Packet::GetSourceAddr() const
{
  return m_SourceAddr;
}

void
Packet::SetSourceAddr(sc_uint<8> sourceAddr)
{
  m_SourceAddr = sourceAddr;
}

sc_uint<8>  
Packet::GetTargetAddr() const
{
  return m_TargetAddr;
}

void
Packet::SetTargetAddr(sc_uint<8> targetAddr)
{
  m_TargetAddr = targetAddr;
}

sc_uint<8>  
Packet::GetPayload() const
{
  return m_Payload;
}

void
Packet::SetPayload(sc_uint<8> payload)
{
  m_Payload = payload;
}

bool
Packet::operator == (Packet const& p) const
{
  return (m_SourceAddr == p.m_SourceAddr) &&
         (m_TargetAddr == p.m_TargetAddr) &&
         (m_Payload == p.m_Payload);
}

std::ostream & operator << (std::ostream &os, Packet const& p)
{
#ifndef SYNTHESIS
  os << "SourceAddr : " << p.GetSourceAddr().to_string()
     << " TargetAddr : " << p.GetTargetAddr().to_string()
     << " Payload    : " << p.GetPayload().to_string();
#endif     
  return os;
}

namespace sc_core {

#if SYSTEMC_VERSION <= 20020405
void sc_trace(sc_trace_file *traceFile, 
	      Packet const& p, sc_string const& name)
{
  sc_trace(traceFile, p.GetSourceAddr(), name + ".SourceAddr");
  sc_trace(traceFile, p.GetTargetAddr(), name + ".TargetAddr");
  sc_trace(traceFile, p.GetPayload()   , name + ".Payload");
}
#else
void sc_trace(sc_trace_file *traceFile, 
	      Packet const& p, std::string const& name)
{
  sc_trace(traceFile, p.GetSourceAddr(), name + ".SourceAddr");
  sc_trace(traceFile, p.GetTargetAddr(), name + ".TargetAddr");
  sc_trace(traceFile, p.GetPayload()   , name + ".Payload");
}
#endif

} // end namespace sc_core


