/*------------------------------------------------------------------------------
 Copyright (c) 2005 Kuratorium OFFIS e.V., Oldenburg, Germany
  
 Name of the Library: OSSS (A library for synthesisable system level models 
                            in SystemC) 

 Created for Project: ICODES (http://icodes.offis.de)

 Created by: See AUTHORS (file)

 
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

Contact:
 Kuratorium OFFIS e.V. (http://offis.de)
 Escherweg 2
 D-26121 Oldenburg
 PHONE: *49 (441) 9722-0
 FAX: *49 (441) 9722-102
 -----------------------------------------------------------------------------*/

void APBMaster::work()
{
  ActionType action = a_idle;
  sc_uint< 32 > data;
  sc_uint< 32 > addr;
  psel0.write(false);
  psel1.write(false);
  psel2.write(false);
  pwrite.write(false);
  penable.write(false);
  paddr.write(0);
  pwdata.write(0);

  bridge_port->reset();
  wait();

  while(true)
  {
    action = bridge_port->getAction();
    wait();
    if(action == a_write)
    {
      addr = bridge_port->getAddr();
      wait();
      data = bridge_port->getData();
      wait();
      paddr.write(addr);
      if(addr < 100)
      {
        psel0.write(true);
      } else 
      if(addr < 200)
      {
        psel1.write(true);
      } else
      {
        psel2.write(true);
      }
      pwrite.write(true);
      paddr.write(addr);
      pwdata.write(data);
      wait();
      penable.write(true);
      wait();
      penable.write(false);
      psel0.write(false);
      psel1.write(false);
      psel2.write(false);
    }
    else
    if(action == a_read)
    {
      addr = bridge_port->getAddr();
      wait();
      paddr.write(addr);
      if(addr < 100)
      {
        psel0.write(true);
      } else 
      if(addr < 200)
      {
        psel1.write(true);
      } else
      {
        psel2.write(true);
      }
      pwrite.write(false);
      wait();
      penable.write(true);
      wait();
      penable.write(false);
      psel0.write(false);
      psel1.write(false);
      psel2.write(false);
      bridge_port->putData(prdata.read());
      wait();
    }
    else
      wait();
  }
}
      
    
  
