/*------------------------------------------------------------------------------
 Copyright (c) 2005 Kuratorium OFFIS e.V., Oldenburg, Germany
  
 Name of the Library: OSSS (A library for synthesisable system level models 
                            in SystemC) 

 Created for Project: ICODES (http://icodes.offis.de)

 Created by: See AUTHORS (file)

 
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

Contact:
 Kuratorium OFFIS e.V. (http://offis.de)
 Escherweg 2
 D-26121 Oldenburg
 PHONE: *49 (441) 9722-0
 FAX: *49 (441) 9722-102
 -----------------------------------------------------------------------------*/

Bridge::Bridge() : b_dataready( false ),
			    b_st( s_idle ),
			    b_addr_buffer( 0 ),
			    b_data_buffer( 0 )
{
}

void Bridge::OSSS_EXPORTED(write(sc_uint< 32 > addr, sc_uint< 32 > data))
{
  b_st = s_write;
  b_addr_buffer = addr;
  b_data_buffer = data;
}

void Bridge::OSSS_EXPORTED(read(sc_uint< 32 > addr))
{
  b_st = s_read;
  b_addr_buffer = addr;
}

sc_uint< 32 > Bridge::OSSS_EXPORTED(readd())
{
  b_st = s_idle;
  b_dataready = false;
  return b_data_buffer;
}

sc_uint< 32 > Bridge::OSSS_EXPORTED(getAddr())
{
  return b_addr_buffer;
}

sc_uint< 32 > Bridge::OSSS_EXPORTED(getData())
{
  b_st = s_idle;
  return b_data_buffer;
}

void Bridge::OSSS_EXPORTED(putData(sc_uint< 32 > data))
{
  b_data_buffer = data;
  b_dataready = true;
}

State Bridge::OSSS_EXPORTED(getState())
{
  return b_st;
}
